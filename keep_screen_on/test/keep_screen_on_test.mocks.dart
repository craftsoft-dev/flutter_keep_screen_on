// Mocks generated by Mockito 5.4.2 from annotations
// in keep_screen_on/test/keep_screen_on_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;

import 'keep_screen_on_test.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [KeepScreenOnPlatformMockMixin].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeepScreenOnPlatformMockMixin extends _i1.Mock
    implements _i2.KeepScreenOnPlatformMockMixin {
  MockKeepScreenOnPlatformMockMixin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool?> get isOn =>
      (super.noSuchMethod(
            Invocation.getter(#isOn),
            returnValue: _i3.Future<bool?>.value(),
          )
          as _i3.Future<bool?>);

  @override
  _i3.Future<bool?> get isOff =>
      (super.noSuchMethod(
            Invocation.getter(#isOff),
            returnValue: _i3.Future<bool?>.value(),
          )
          as _i3.Future<bool?>);

  @override
  _i3.Future<bool?> get isAllowLockWhileScreenOn =>
      (super.noSuchMethod(
            Invocation.getter(#isAllowLockWhileScreenOn),
            returnValue: _i3.Future<bool?>.value(),
          )
          as _i3.Future<bool?>);

  @override
  _i3.Future<bool> turnOn({
    bool? on = true,
    bool? withAllowLockWhileScreenOn = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#turnOn, [], {
              #on: on,
              #withAllowLockWhileScreenOn: withAllowLockWhileScreenOn,
            }),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> turnOff({bool? withAllowLockWhileScreenOn = false}) =>
      (super.noSuchMethod(
            Invocation.method(#turnOff, [], {
              #withAllowLockWhileScreenOn: withAllowLockWhileScreenOn,
            }),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> addAllowLockWhileScreenOn({bool? on = true}) =>
      (super.noSuchMethod(
            Invocation.method(#addAllowLockWhileScreenOn, [], {#on: on}),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> clearAllowLockWhileScreenOn() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllowLockWhileScreenOn, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);
}
